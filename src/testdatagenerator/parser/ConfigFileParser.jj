PARSER_BEGIN(ConfigFileParser)

package testdatagenerator.parser;

import java.io.*;
import event.*;
import event.eventtype.*;
import java.util.*;
import testdatagenerator.*;

public class ConfigFileParser {

/**  
  A String based constructor for ease of use.
  **/
    public ConfigFileParser(String s) 
    {
        this((Reader)(new StringReader(s))); 
        
    }
    
    public List<RandomEventConfiguration> getEventConfig() throws ParseException {
    	return eventDefs();
    }
     
}
PARSER_END(ConfigFileParser)

/**
	Each line in file represents configuration for event-class with following syntax.
	<class-name> { [<attr-name>:<Datatype>:<Distribution>(<parameter-for-distribution>,..)   ,...]}
**/

/** Skip these characters, they are considered "white space" **/
SKIP :                              
{
    " "
    | "\t"
    | "\r"
    | "\n"

}

TOKEN: /*RESERVED TOKENS FOR UQL */
{
      <COMMA: ",">
   |  <LBRACE:  "{">
   |  <RBRACE: "}">
   |  <LPARAN: "(">
   |  <RPARAN: ")">
   |  <COLON: ":">
   |  <QUOTED_STRING: "\"" (~["\""])+ "\"" >
   |  <DOUBLE_VAL: (["0"-"9"])+ ("." (["0"-"9"])+)? >    
   |  <VALID_NAME: (["A"-"Z", "a"-"z", "0"-"9"]) (["A"-"Z", "a"-"z", "0"-"9"])* >
   
}

List<RandomEventConfiguration> eventDefs() :
{
	List<RandomEventConfiguration> list = new ArrayList<RandomEventConfiguration>();
	RandomEventConfiguration config;
}
{
	(
		config = eventDef()
		{ list.add(config); }
	)*
	<EOF>
	{return list;}
}
	


RandomEventConfiguration eventDef() :
{
	EventClass ec; RandomAttributeConfiguration attrConfig; Token t; String className;
	PrimaryEventType eType = new PrimaryEventType();
	ArrayList<RandomAttributeConfiguration> attrConfigList = new ArrayList<RandomAttributeConfiguration>();
	Map<String,RandomAttributeConfiguration> map = new HashMap<String,RandomAttributeConfiguration>();
}
{    
        t=<VALID_NAME> 
        { className = t.image; }
        <LBRACE> 
        ( 
        	attrConfig = attributeConfig(map)
        	{
        		attrConfigList.add(attrConfig);
        		eType.addAttribute(attrConfig.attrName, attrConfig.attrType);
        	}
        	(
        		<COMMA>
        		attrConfig=attributeConfig(map)
        		{
        			attrConfigList.add(attrConfig);
        			eType.addAttribute(attrConfig.attrName, attrConfig.attrType);
        		}
        	)*
        )?
        <RBRACE>
        {
        	ec = new EventClass(className, eType);
        	RandomEventConfiguration eventConfig = new RandomEventConfiguration();
        	eventConfig.eClass = ec;
        	eventConfig.map = map;
        	return eventConfig;
        }
}

RandomAttributeConfiguration attributeConfig(Map<String,RandomAttributeConfiguration> map) :
{
	DistributionConfiguration distConfig;
	Token attrNameToken, attrTypeToken ; String[] strings = null;
	RandomAttributeConfiguration attrConfig = new RandomAttributeConfiguration(); 
}
{
	attrNameToken = <VALID_NAME> 
	<COLON> 
	attrTypeToken = <VALID_NAME> 
	<COLON> 
	distConfig = distConfig() 
	( 
		<COLON> 
		<LPARAN>
		strings = stringValues()
		<RPARAN> 
	)?
	{
		 attrConfig.attrName = attrNameToken.image;
		attrConfig.attrType = AttributeType.valueOf(attrTypeToken.image);
		attrConfig.distConfig = distConfig;
		attrConfig.strValues = strings;
		map.put(attrNameToken.image,attrConfig);
		return attrConfig;
	}
}

DistributionConfiguration distConfig() :
{
	DistributionConfiguration distConfig=new DistributionConfiguration();
	Token distType, doubleToken; ArrayList<Double> list=new ArrayList<Double>();
}
{
	distType=<VALID_NAME> 
	{ distConfig.distType=DistributionConfiguration.DistributionType.valueOf(distType.image); }
	<LPARAN> 
	doubleToken=<DOUBLE_VAL>
	{ list.add(Double.parseDouble(doubleToken.image)); }
	(
		<COMMA>
		doubleToken = <DOUBLE_VAL> { list.add(Double.parseDouble(doubleToken.image)); } 
	)* 
	<RPARAN>
	{distConfig.setDistribution(DistributionConfiguration.DistributionType.valueOf(distType.image),
		list.toArray(new Double[0]));  return distConfig; }
}

String[] stringValues() :
{
	ArrayList<String> strings = new ArrayList<String>();
	Token strToken;
}
{
	strToken = <QUOTED_STRING> 
	{ strings.add(strToken.image); }
	(
	 	<COMMA> 
	 	strToken = <QUOTED_STRING>
	 	{strings.add(strToken.image); } 
	 )*
	 {return  strings.toArray(new String[0]); }
}